/* A Bison parser, made from cfe/c/c.y
   by GNU bison 1.35.  */

#define YYBISON 1  /* Identify Bison output.  */

#define YYLSP_NEEDED 1

# define	C_VOID	257
# define	C_CHAR	258
# define	C_SHORT	259
# define	C_INT	260
# define	C_LONG	261
# define	C_SIGNED	262
# define	C_UNSIGNED	263
# define	C_FLOAT	264
# define	C_DOUBLE	265
# define	C__BOOL	266
# define	C__COMPLEX	267
# define	C__IMAGINARY	268
# define	C_EXT_INT	269
# define	C_EXT_FLOAT	270
# define	C_CONST	271
# define	C_VOLATILE	272
# define	C_RESTRICT	273
# define	C_EXTERN	274
# define	C_AUTO	275
# define	C_STATIC	276
# define	C_REGISTER	277
# define	C_TYPEDEF	278
# define	C_INLINE	279
# define	STRUCT	280
# define	UNION	281
# define	ENUM	282
# define	SWITCH	283
# define	CONTINUE	284
# define	CASE	285
# define	SIZEOF	286
# define	DEFAULT	287
# define	ELSE	288
# define	WHILE	289
# define	DO	290
# define	GOTO	291
# define	BREAK	292
# define	IF	293
# define	FOR	294
# define	RETURN	295
# define	IDENT	296
# define	TYPENAME	297
# define	NUMBER	298
# define	F_NUMBER	299
# define	STRING_CONST	300
# define	LSTRING_CONST	301
# define	LOG_OR	302
# define	LOG_AND	303
# define	INC	304
# define	DEC	305
# define	PTR	306
# define	ELLIPSIS	307
# define	ASSIGN	308
# define	EQCOMPARE	309
# define	ARITHCOMPARE	310
# define	SHIFT	311
# define	DECLSPEC	312
# define	ATTR	313
# define	TYPEOF	314
# define	LABEL	315
# define	ALIGNOF	316
# define	GCC_ATTRIBUTE	317

#line 1 "cfe/c/c.y"

#include "precomp.h"
#include "cfe_priv.h"

#include "c.tab.inc" // automatically generated definitions

#define YYINITDEPTH 50

#define YYDEBUG 1

#if YYDEBUG
#  define YYERROR_VERBOSE 1
#endif

// In order to prevent usage of last_line & last_column, we declare this to be
// empty
#define YYLLOC_DEFAULT(Current, Rhs, N) 

void yyerror ( char * err );
int yylex ( void );

static void yy_mark ( unsigned typ, const YYSTYPE * pval );

// Use this to fix bison type errors when we *really* don't have a result
// from a production.
#define NO_RESULT  ((void)0)

static TDeclSpecs * DSpecs_Combine_Prim ( TDeclSpecs ** a, TDeclSpecs ** pb );
static TQualNode  * DSpecs_GenQual_Prim ( TDeclSpecs ** pds );

#define DSPECS_COMBINE( a, b ) DSpecs_Combine_Prim( &(a), &(b) )
#define DSPECS_GENQUAL( a )    DSpecs_GenQual_Prim( &(a) )


#line 36 "cfe/c/c.y"
#ifndef YYSTYPE
typedef union 
{
  int               token;
  STRING            str;
  TSymbol           * sym;
  TQualNode         * m_typ; // modifiable TQualNode
  const TQualNode   * typ;
  const TTypeNode   * tnode;
  TEnumDesc         * edesc;
  TAst              * ast;
  TDeclSpecs        * dspecs;
  TScope            * scope;
} yystype;
# define YYSTYPE yystype
# define YYSTYPE_IS_TRIVIAL 1
#endif

#ifndef YYLTYPE
typedef struct yyltype
{
  int first_line;
  int first_column;

  int last_line;
  int last_column;
} yyltype;

# define YYLTYPE yyltype
# define YYLTYPE_IS_TRIVIAL 1
#endif

#ifndef YYDEBUG
# define YYDEBUG 0
#endif



#define	YYFINAL		555
#define	YYFLAG		-32768
#define	YYNTBASE	86

/* YYTRANSLATE(YYLEX) -- Bison token number corresponding to YYLEX. */
#define YYTRANSLATE(x) ((unsigned)(x) <= 317 ? yytranslate[x] : 239)

/* YYTRANSLATE[YYLEX] -- Bison token number corresponding to YYLEX. */
static const char yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,    77,     2,     2,     2,    79,    73,     2,
      65,    66,    72,    74,    64,    75,    69,    78,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,    83,    85,
       2,    84,     2,    82,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,    67,     2,    68,    80,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,    70,    81,    71,    76,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63
};

#if YYDEBUG
static const short yyprhs[] =
{
       0,     0,     2,     3,     4,     5,     6,     8,    10,    12,
      14,    16,    19,    22,    24,    26,    28,    30,    32,    34,
      38,    42,    44,    49,    54,    58,    62,    65,    68,    76,
      78,    82,    83,    85,    87,    90,    93,    96,    99,   102,
     105,   110,   113,   118,   121,   123,   125,   127,   129,   131,
     136,   138,   142,   146,   150,   152,   156,   160,   162,   166,
     168,   172,   174,   178,   180,   184,   186,   190,   192,   196,
     198,   202,   204,   208,   210,   216,   218,   222,   223,   225,
     227,   229,   231,   235,   237,   238,   240,   242,   246,   248,
     251,   254,   257,   260,   263,   264,   266,   267,   270,   273,
     276,   279,   280,   283,   286,   289,   291,   292,   297,   299,
     301,   302,   305,   310,   312,   314,   316,   318,   320,   322,
     324,   329,   331,   333,   335,   337,   339,   344,   349,   351,
     353,   355,   357,   359,   361,   363,   365,   367,   369,   371,
     373,   378,   383,   388,   393,   396,   397,   398,   399,   404,
     406,   408,   410,   413,   415,   419,   421,   424,   426,   429,
     432,   433,   436,   439,   440,   443,   445,   446,   451,   454,
     459,   463,   464,   473,   474,   483,   486,   488,   490,   491,
     496,   498,   500,   504,   506,   508,   513,   515,   517,   519,
     521,   524,   525,   526,   533,   534,   542,   543,   551,   552,
     559,   560,   564,   565,   570,   571,   575,   576,   581,   582,
     587,   589,   590,   594,   595,   601,   604,   605,   609,   610,
     616,   619,   620,   624,   625,   631,   634,   636,   639,   640,
     642,   644,   647,   649,   650,   652,   653,   656,   658,   660,
     664,   668,   672,   675,   677,   679,   683,   687,   689,   691,
     694,   695,   701,   702,   708,   709,   714,   715,   719,   720,
     722,   723,   729,   731,   733,   735,   740,   743,   748,   751,
     752,   754,   756,   759,   763,   766,   772,   774,   776,   778,
     780,   782,   784,   788,   793,   797,   804,   805,   811,   816,
     819,   823,   824,   826,   829,   833,   835,   838,   839,   841,
     843,   845,   848,   854,   862,   868,   874,   882,   892,   901,
     905,   910,   913,   916,   920,   924,   929,   931,   933,   935,
     937,   938,   944,   945,   952,   953,   956,   958,   961
};
static const short yyrhs[] =
{
     231,     0,     0,     0,     0,     0,    64,     0,    44,     0,
      45,     0,    46,     0,    47,     0,    91,    46,     0,    91,
      47,     0,    42,     0,    43,     0,    42,     0,    92,     0,
      90,     0,    91,     0,    65,   116,    66,     0,    65,   218,
      66,     0,    94,     0,    95,    67,   116,    68,     0,    95,
      65,    97,    66,     0,    95,    69,    93,     0,    95,    52,
      93,     0,    95,    50,     0,    95,    51,     0,    65,   199,
      66,    70,   211,    89,    71,     0,   112,     0,    96,    64,
     112,     0,     0,    96,     0,    95,     0,    50,    98,     0,
      51,    98,     0,    72,   100,     0,    73,   100,     0,    99,
     100,     0,    32,    98,     0,    32,    65,   199,    66,     0,
      62,    98,     0,    62,    65,   199,    66,     0,    49,    93,
       0,    74,     0,    75,     0,    76,     0,    77,     0,    98,
       0,    65,   199,    66,   100,     0,   100,     0,   101,    72,
     100,     0,   101,    78,   100,     0,   101,    79,   100,     0,
     101,     0,   102,    74,   101,     0,   102,    75,   101,     0,
     102,     0,   103,    57,   102,     0,   103,     0,   104,    56,
     103,     0,   104,     0,   105,    55,   104,     0,   105,     0,
     106,    73,   105,     0,   106,     0,   107,    80,   106,     0,
     107,     0,   108,    81,   107,     0,   108,     0,   109,    49,
     108,     0,   109,     0,   110,    48,   109,     0,   110,     0,
     110,    82,   117,    83,   111,     0,   111,     0,    98,   114,
     112,     0,     0,   112,     0,    54,     0,    84,     0,   112,
       0,   115,    64,   112,     0,   115,     0,     0,   116,     0,
     111,     0,   120,   127,    85,     0,   121,     0,   130,   122,
       0,   162,   122,     0,   160,   122,     0,   133,   123,     0,
     209,   124,     0,     0,   121,     0,     0,   130,   123,     0,
     162,   123,     0,   160,   123,     0,   133,   123,     0,     0,
     130,   124,     0,   162,   124,     0,   160,   124,     0,   129,
       0,     0,   125,    64,   126,   129,     0,   128,     0,   125,
       0,     0,   128,   163,     0,   128,   163,    84,   210,     0,
     131,     0,   132,     0,    24,     0,    20,     0,    22,     0,
      21,     0,    23,     0,    58,    65,    93,    66,     0,   134,
       0,   135,     0,   136,     0,   137,     0,   152,     0,    60,
      65,   116,    66,     0,    60,    65,   199,    66,     0,     3,
       0,     4,     0,     5,     0,     6,     0,     7,     0,     8,
       0,     9,     0,    10,     0,    11,     0,    12,     0,    13,
       0,    14,     0,    15,    65,    44,    66,     0,    16,    65,
      44,    66,     0,   142,    93,   139,   140,     0,   142,   138,
     139,   140,     0,   142,    93,     0,     0,     0,     0,    70,
     141,   143,    71,     0,    26,     0,    27,     0,   144,     0,
     143,   144,     0,     1,     0,   120,   149,    85,     0,   146,
       0,   160,   146,     0,   160,     0,   133,   147,     0,   209,
     148,     0,     0,   160,   147,     0,   133,   147,     0,     0,
     160,   148,     0,   151,     0,     0,   149,    64,   150,   151,
       0,   128,   163,     0,   128,   163,    83,   118,     0,   128,
      83,   118,     0,     0,    28,    93,   155,    70,   153,   156,
      89,    71,     0,     0,    28,   138,   155,    70,   154,   156,
      89,    71,     0,    28,    93,     0,   139,     0,   158,     0,
       0,   156,    64,   157,   158,     0,     1,     0,   159,     0,
     159,    84,   118,     0,    93,     0,   161,     0,    59,    65,
      93,    66,     0,    17,     0,    19,     0,    18,     0,    25,
       0,   190,   177,     0,     0,     0,    67,   193,   113,    68,
     165,   164,     0,     0,    67,    22,   193,   112,    68,   166,
     164,     0,     0,    67,   192,    22,   112,    68,   167,   164,
       0,     0,    67,   193,    72,    68,   168,   164,     0,     0,
     172,   169,   164,     0,     0,    65,    66,   170,   164,     0,
       0,   174,   171,   164,     0,     0,    65,   173,   195,    66,
       0,     0,    65,   175,   198,    66,     0,    65,     0,     0,
      93,   178,   164,     0,     0,   176,   163,    66,   179,   164,
       0,   190,   181,     0,     0,    93,   182,   164,     0,     0,
     176,   184,    66,   183,   164,     0,   190,   185,     0,     0,
      92,   186,   164,     0,     0,   176,   184,    66,   187,   164,
       0,    72,   193,     0,   188,     0,   189,   188,     0,     0,
     189,     0,   160,     0,   191,   160,     0,   191,     0,     0,
     192,     0,     0,   194,   196,     0,     1,     0,   197,     0,
     196,    64,   197,     0,   120,   128,   180,     0,   120,   128,
     200,     0,   120,   128,     0,    53,     0,    92,     0,   198,
      64,    93,     0,   145,   128,   200,     0,   145,     0,   189,
       0,   190,   207,     0,     0,    67,   113,    68,   202,   206,
       0,     0,    67,    72,    68,   203,   206,     0,     0,    65,
      66,   204,   206,     0,     0,   172,   205,   206,     0,     0,
     201,     0,     0,   176,   200,    66,   208,   206,     0,   201,
       0,    43,     0,   112,     0,    70,   211,    89,    71,     0,
     213,   210,     0,   211,    64,   213,   210,     0,   214,    84,
       0,     0,   212,     0,   215,     0,   214,   215,     0,    67,
     118,    68,     0,    69,    93,     0,    67,   118,    53,   118,
      68,     0,   217,     0,   218,     0,   227,     0,   228,     0,
     229,     0,   230,     0,    93,    83,   216,     0,    31,   118,
      83,   216,     0,    33,    83,   216,     0,    31,   118,    53,
     118,    83,   216,     0,     0,    70,   219,   222,   225,    71,
       0,    70,   222,   225,    71,     0,   223,    85,     0,   221,
     223,    85,     0,     0,   221,     0,    61,    93,     0,   223,
      64,    93,     0,   226,     0,   224,   226,     0,     0,   224,
       0,   119,     0,   216,     0,   117,    85,     0,    39,    65,
     116,    66,   216,     0,    39,    65,   116,    66,   216,    34,
     216,     0,    29,    65,   116,    66,   216,     0,    35,    65,
     116,    66,   216,     0,    36,   216,    35,    65,   116,    66,
      85,     0,    40,    65,   117,    85,   117,    85,   117,    66,
     216,     0,    40,    65,   119,   117,    85,   117,    66,   216,
       0,    37,    93,    85,     0,    37,    72,   100,    85,     0,
      30,    85,     0,    38,    85,     0,    41,   117,    85,     0,
     232,    88,    87,     0,   231,   232,    88,    87,     0,   233,
       0,   119,     0,     1,     0,    85,     0,     0,   120,   128,
     163,   234,   220,     0,     0,   120,   128,   163,   236,   235,
     220,     0,     0,   237,   238,     0,   119,     0,   238,   119,
       0,     1,     0
};

#endif

#if YYDEBUG
/* YYRLINE[YYN] -- source line where rule number YYN was defined. */
static const short yyrline[] =
{
       0,   162,   164,   173,   201,   220,   222,   232,   234,   240,
     242,   243,   245,   276,   280,   282,   291,   293,   294,   295,
     297,   301,   303,   304,   305,   306,   307,   308,   309,   312,
     314,   317,   319,   323,   325,   326,   327,   328,   329,   330,
     331,   334,   335,   336,   339,   340,   340,   340,   345,   347,
     351,   353,   354,   355,   359,   361,   362,   366,   368,   372,
     374,   378,   380,   384,   386,   390,   392,   396,   398,   402,
     404,   408,   410,   414,   417,   421,   423,   427,   429,   432,
     433,   437,   439,   442,   446,   448,   452,   492,   498,   515,
     517,   518,   520,   521,   524,   526,   529,   531,   532,   533,
     534,   537,   539,   540,   541,   544,   546,   546,   549,   554,
     557,   563,   568,   576,   579,   582,   585,   586,   587,   588,
     597,   617,   619,   620,   621,   622,   625,   626,   629,   631,
     632,   633,   634,   635,   636,   637,   638,   639,   640,   641,
     645,   653,   662,   671,   679,   685,   687,   693,   693,   704,
     706,   709,   711,   712,   715,   730,   741,   743,   744,   745,
     748,   750,   751,   754,   756,   759,   761,   761,   764,   769,
     773,   780,   780,   786,   786,   791,   797,   804,   806,   806,
     807,   810,   815,   821,   826,   834,   840,   842,   843,   848,
     854,   861,   866,   866,   875,   875,   884,   884,   893,   893,
     902,   902,   906,   906,   910,   910,   916,   916,   927,   927,
     960,   965,   965,   970,   970,   982,   989,   989,   994,   994,
    1000,  1007,  1007,  1012,  1012,  1024,  1031,  1033,  1036,  1038,
    1041,  1043,  1046,  1051,  1053,  1059,  1071,  1074,  1086,  1088,
    1091,  1098,  1104,  1109,  1123,  1125,  1129,  1134,  1138,  1143,
    1149,  1149,  1159,  1159,  1168,  1168,  1172,  1172,  1178,  1183,
    1186,  1186,  1192,  1199,  1207,  1209,  1212,  1214,  1217,  1221,
    1223,  1226,  1228,  1231,  1233,  1236,  1247,  1249,  1250,  1251,
    1252,  1253,  1257,  1259,  1260,  1263,  1267,  1267,  1282,  1292,
    1294,  1297,  1299,  1302,  1304,  1307,  1309,  1312,  1314,  1317,
    1319,  1323,  1328,  1330,  1331,  1335,  1337,  1338,  1339,  1343,
    1346,  1348,  1349,  1350,  1360,  1364,  1369,  1371,  1372,  1375,
    1379,  1379,  1392,  1392,  1407,  1407,  1418,  1420,  1421
};
#endif


#if (YYDEBUG) || defined YYERROR_VERBOSE

/* YYTNAME[TOKEN_NUM] -- String name of the token TOKEN_NUM. */
static const char *const yytname[] =
{
  "$", "error", "$undefined.", "C_VOID", "C_CHAR", "C_SHORT", "C_INT", 
  "C_LONG", "C_SIGNED", "C_UNSIGNED", "C_FLOAT", "C_DOUBLE", "C__BOOL", 
  "C__COMPLEX", "C__IMAGINARY", "C_EXT_INT", "C_EXT_FLOAT", "C_CONST", 
  "C_VOLATILE", "C_RESTRICT", "C_EXTERN", "C_AUTO", "C_STATIC", 
  "C_REGISTER", "C_TYPEDEF", "C_INLINE", "STRUCT", "UNION", "ENUM", 
  "SWITCH", "CONTINUE", "CASE", "SIZEOF", "DEFAULT", "ELSE", "WHILE", 
  "DO", "GOTO", "BREAK", "IF", "FOR", "RETURN", "IDENT", "TYPENAME", 
  "NUMBER", "F_NUMBER", "STRING_CONST", "LSTRING_CONST", "LOG_OR", 
  "LOG_AND", "INC", "DEC", "PTR", "ELLIPSIS", "ASSIGN", "EQCOMPARE", 
  "ARITHCOMPARE", "SHIFT", "DECLSPEC", "ATTR", "TYPEOF", "LABEL", 
  "ALIGNOF", "GCC_ATTRIBUTE", "','", "'('", "')'", "'['", "']'", "'.'", 
  "'{'", "'}'", "'*'", "'&'", "'+'", "'-'", "'~'", "'!'", "'/'", "'%'", 
  "'^'", "'|'", "'?'", "':'", "'='", "';'", "start", "garbage_collect", 
  "ensure_file_scope", "comma_opt", "constant", "string_literal", 
  "identifier", "any_identifier", "primary_expression", 
  "postfix_expression", "argument_expression_list", 
  "argument_expression_list_opt", "unary_expression", "unary_operator", 
  "cast_expression", "multiplicative_expression", "additive_expression", 
  "shift_expression", "relational_expression", "equality_expression", 
  "and_expression", "exclusive_or_expression", "inclusive_or_expression", 
  "logical_and_expression", "logical_or_expression", 
  "conditional_expression", "assignment_expression", 
  "assignment_expression_opt", "assignment_operator", "expression1", 
  "expression", "expression_opt", "constant_expression", "declaration", 
  "GenType_declaration_specifiers", "declaration_specifiers", 
  "declaration_specifiers_opt", "declaration_specifiers1", 
  "declaration_specifiers2", "init_declarator_list", "@1", 
  "init_declarator_list_opt", "GetDSpecsTyp", "init_declarator", 
  "storage_class_specifier", "sclass", "declspec", "type_specifier", 
  "typespec", "extended_int_specifier", "extended_float_specifier", 
  "struct_or_union_specifier", "null_str", "declare_tag", "struct_scope", 
  "@2", "struct_or_union", "struct_declaration_list", 
  "struct_declaration", "GenType_specifier_qualifier_list", 
  "specifier_qualifier_list", "specifier_qualifier_list1", 
  "specifier_qualifier_list2", "struct_declarator_list", "@3", 
  "struct_declarator", "enum_specifier", "@4", "@5", "declare_enum", 
  "enumerator_list", "@6", "enumerator", "enumeration_constant", 
  "type_qualifier", "qual", "function_specifier", "declarator", 
  "direct_declarator_tail", "@7", "@8", "@9", "@10", "@11", "@12", "@13", 
  "param_scope", "@14", "identifier_list_scope", "@15", 
  "left_bra_NullTyp", "direct_declarator", "@16", "@17", "declarator1", 
  "direct_declarator1", "@18", "@19", "declarator2", "direct_declarator2", 
  "@20", "@21", "qual_pointer", "pointer", "pointer_opt", 
  "type_qualifier_list", "GenQual_type_qualifier_list", 
  "type_qualifier_list_opt", "forward_parameter_decl", 
  "parameter_type_list", "parameter_list", "parameter_declaration", 
  "identifier_list", "type_name", "abstract_declarator", 
  "direct_abstract_declarator_tail", "@22", "@23", "@24", "@25", 
  "direct_abstract_declarator_tail_opt", "direct_abstract_declarator", 
  "@26", "typedef_name", "initializer", "initializer_list", "designation", 
  "designation_opt", "designator_list", "designator", "statement", 
  "labeled_statement", "compound_statement", "@27", 
  "function_compound_statement", "declare_labels_list", 
  "declare_labels_list_opt", "declare_labels", "block_item_list", 
  "block_item_list_opt", "block_item", "expression_statement", 
  "selection_statement", "iteration_statement", "jump_statement", 
  "translation_unit", "external_declaration", "function_definition", 
  "@28", "@29", "declaration_list_scope", "@30", "declaration_list", 0
};
#endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives. */
static const short yyr1[] =
{
       0,    86,    86,    87,    88,    89,    89,    90,    90,    91,
      91,    91,    91,    92,    93,    93,    94,    94,    94,    94,
      94,    95,    95,    95,    95,    95,    95,    95,    95,    96,
      96,    97,    97,    98,    98,    98,    98,    98,    98,    98,
      98,    98,    98,    98,    99,    99,    99,    99,   100,   100,
     101,   101,   101,   101,   102,   102,   102,   103,   103,   104,
     104,   105,   105,   106,   106,   107,   107,   108,   108,   109,
     109,   110,   110,   111,   111,   112,   112,   113,   113,   114,
     114,   115,   115,   116,   117,   117,   118,   119,   120,   121,
     121,   121,   121,   121,   122,   122,   123,   123,   123,   123,
     123,   124,   124,   124,   124,   125,   126,   125,   127,   127,
     128,   129,   129,   130,   130,   131,   131,   131,   131,   131,
     132,   133,   133,   133,   133,   133,   133,   133,   134,   134,
     134,   134,   134,   134,   134,   134,   134,   134,   134,   134,
     135,   136,   137,   137,   137,   138,   139,   141,   140,   142,
     142,   143,   143,   143,   144,   145,   146,   146,   146,   146,
     147,   147,   147,   148,   148,   149,   150,   149,   151,   151,
     151,   153,   152,   154,   152,   152,   155,   156,   157,   156,
     156,   158,   158,   159,   160,   160,   161,   161,   161,   162,
     163,   164,   165,   164,   166,   164,   167,   164,   168,   164,
     169,   164,   170,   164,   171,   164,   173,   172,   175,   174,
     176,   178,   177,   179,   177,   180,   182,   181,   183,   181,
     184,   186,   185,   187,   185,   188,   189,   189,   190,   190,
     191,   191,   192,   193,   193,   194,   195,   195,   196,   196,
     197,   197,   197,   197,   198,   198,   199,   199,   200,   200,
     202,   201,   203,   201,   204,   201,   205,   201,   206,   206,
     208,   207,   207,   209,   210,   210,   211,   211,   212,   213,
     213,   214,   214,   215,   215,   215,   216,   216,   216,   216,
     216,   216,   217,   217,   217,   217,   219,   218,   220,   221,
     221,   222,   222,   223,   223,   224,   224,   225,   225,   226,
     226,   227,   228,   228,   228,   229,   229,   229,   229,   230,
     230,   230,   230,   230,   231,   231,   232,   232,   232,   232,
     234,   233,   235,   233,   237,   236,   238,   238,   238
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN. */
static const short yyr2[] =
{
       0,     1,     0,     0,     0,     0,     1,     1,     1,     1,
       1,     2,     2,     1,     1,     1,     1,     1,     1,     3,
       3,     1,     4,     4,     3,     3,     2,     2,     7,     1,
       3,     0,     1,     1,     2,     2,     2,     2,     2,     2,
       4,     2,     4,     2,     1,     1,     1,     1,     1,     4,
       1,     3,     3,     3,     1,     3,     3,     1,     3,     1,
       3,     1,     3,     1,     3,     1,     3,     1,     3,     1,
       3,     1,     3,     1,     5,     1,     3,     0,     1,     1,
       1,     1,     3,     1,     0,     1,     1,     3,     1,     2,
       2,     2,     2,     2,     0,     1,     0,     2,     2,     2,
       2,     0,     2,     2,     2,     1,     0,     4,     1,     1,
       0,     2,     4,     1,     1,     1,     1,     1,     1,     1,
       4,     1,     1,     1,     1,     1,     4,     4,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       4,     4,     4,     4,     2,     0,     0,     0,     4,     1,
       1,     1,     2,     1,     3,     1,     2,     1,     2,     2,
       0,     2,     2,     0,     2,     1,     0,     4,     2,     4,
       3,     0,     8,     0,     8,     2,     1,     1,     0,     4,
       1,     1,     3,     1,     1,     4,     1,     1,     1,     1,
       2,     0,     0,     6,     0,     7,     0,     7,     0,     6,
       0,     3,     0,     4,     0,     3,     0,     4,     0,     4,
       1,     0,     3,     0,     5,     2,     0,     3,     0,     5,
       2,     0,     3,     0,     5,     2,     1,     2,     0,     1,
       1,     2,     1,     0,     1,     0,     2,     1,     1,     3,
       3,     3,     2,     1,     1,     3,     3,     1,     1,     2,
       0,     5,     0,     5,     0,     4,     0,     3,     0,     1,
       0,     5,     1,     1,     1,     4,     2,     4,     2,     0,
       1,     1,     2,     3,     2,     5,     1,     1,     1,     1,
       1,     1,     3,     4,     3,     6,     0,     5,     4,     2,
       3,     0,     1,     2,     3,     1,     2,     0,     1,     1,
       1,     2,     5,     7,     5,     5,     7,     9,     8,     3,
       4,     2,     2,     3,     3,     4,     1,     1,     1,     1,
       0,     5,     0,     6,     0,     2,     1,     2,     1
};

/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
   doesn't specify something else to do.  Zero means the default is an
   error. */
static const short yydefact[] =
{
       0,   318,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,     0,     0,   186,   188,   187,   116,
     118,   117,   119,   115,   189,   149,   150,   145,   263,     0,
       0,     0,   319,   317,   110,    88,    94,   113,   114,    96,
     121,   122,   123,   124,   145,   125,    94,   184,    94,   101,
       0,     4,   316,     0,     0,    15,    14,   175,   146,     0,
       0,     0,   109,     0,   228,   105,    95,    89,    92,    96,
      96,    96,    96,   144,   146,    91,    90,    93,   101,   101,
     101,     4,     3,     0,     0,   176,     0,     0,     0,     0,
       0,    13,     7,     8,     9,    10,     0,     0,     0,     0,
       0,     0,     0,    44,    45,    46,    47,    17,    18,    16,
      21,    33,    48,     0,    50,    54,    57,    59,    61,    63,
      65,    67,    69,    71,    73,    75,    81,    83,     0,   160,
     110,   155,   157,     0,   163,   106,    87,   233,   324,   226,
     229,     0,    97,   100,    99,    98,     0,     0,   102,   104,
     103,     3,   314,   140,   141,   171,   173,   120,   185,     0,
      39,    43,     0,    34,    35,     0,    41,   286,     0,     0,
       0,    48,    36,    37,    11,    12,    26,    27,     0,    31,
       0,     0,    79,    80,     0,    38,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    84,
       0,   126,   160,   158,   160,   228,   156,   127,   159,   163,
     110,   230,   232,   234,   225,     0,     0,   322,     0,   227,
     210,   211,   228,   190,   147,   142,   143,   315,     0,     0,
       0,     0,     0,   291,    19,     0,    20,    25,    32,     0,
      29,     0,    24,    76,    51,    52,    53,    55,    56,    58,
      60,    62,    64,    66,    68,    70,    72,    85,     0,    82,
     162,   161,   229,     0,   246,   164,   228,   107,   231,   269,
     264,   112,   291,   321,     0,   328,   326,   110,   325,   191,
       0,     0,   180,   183,     5,   177,   181,     5,    40,     0,
      42,     0,   292,    84,     0,   269,    49,     0,    23,    22,
       0,   206,    77,   256,   228,   262,   249,   111,     0,     0,
       5,   270,     0,     0,   271,    84,   323,   228,   327,   206,
     233,   212,   200,   204,   213,   153,   110,     0,   151,   178,
       0,     0,     0,   293,     0,     0,     0,     0,     0,     0,
      84,     0,     0,     0,     0,    84,    13,   263,     0,     0,
     299,   300,   276,   277,    84,     0,   295,   278,   279,   280,
     281,     0,   289,     5,    30,    74,   254,     0,     0,    78,
       0,   258,     0,    86,     0,   274,   269,     0,   266,   268,
     272,     0,   202,     0,   233,   234,    77,   191,   191,   191,
     228,     0,   165,   148,   152,     0,   172,   182,   174,   290,
       0,   311,     0,    84,     0,     0,     0,     0,   312,     0,
      84,     0,    84,   301,   296,   287,   294,     0,   258,   237,
       0,     0,   252,   250,   206,   259,   257,   260,     0,   273,
       0,   265,   288,   191,   244,     0,     0,     0,     0,     0,
     201,   205,   214,     0,   168,   166,   154,   179,     0,     0,
      84,   284,     0,     0,     0,   309,     0,     0,    84,   313,
     282,    28,   255,   243,   110,   236,   238,   207,   258,   258,
     258,     0,   267,   203,     0,   209,     0,     0,   198,   192,
     170,     0,   110,    84,     0,   283,    84,     0,   310,    84,
      84,     0,   228,     0,   253,   251,   261,   275,   245,   194,
     196,   191,   191,   169,   167,   304,    84,   305,     0,   302,
       0,    84,   240,     0,   241,   239,   191,   191,   199,   193,
     285,     0,    84,    84,     0,   216,   228,   215,   195,   197,
     306,   303,     0,    84,   191,     0,     0,    84,   308,   217,
     218,   221,   228,   220,   307,   191,   191,     0,   219,   222,
     223,   191,   224,     0,     0,     0
};

static const short yydefgoto[] =
{
     553,   152,    82,   330,   107,   108,   109,   348,   110,   111,
     238,   239,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   370,   184,   127,
     257,   349,   374,   350,   277,    35,    67,    68,    77,    62,
     210,    63,   390,    65,    36,    37,    38,    39,    40,    41,
      42,    43,    58,    85,   225,   281,    44,   327,   328,   130,
     131,   203,   208,   391,   482,   392,    45,   228,   229,    86,
     284,   395,   285,   286,    46,    47,    48,   307,   321,   502,
     516,   517,   501,   387,   433,   388,   322,   367,   323,   383,
     222,   223,   279,   389,   512,   527,   534,   545,   535,   543,
     546,   551,   139,   140,   141,   212,   213,   214,   420,   421,
     465,   466,   435,   133,   372,   425,   469,   468,   418,   371,
     426,   306,   470,    49,   271,   310,   311,   312,   313,   314,
     351,   352,   353,   233,   273,   292,   293,   294,   354,   355,
     356,   357,   358,   359,   360,    50,    51,    52,   216,   274,
     217,   218,   278
};

static const short yypact[] =
{
     451,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,   -41,   -12,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,   163,-32768,     7,
      18,    25,-32768,-32768,-32768,-32768,  1297,-32768,-32768,  1355,
  -32768,-32768,-32768,-32768,   163,-32768,  1297,-32768,  1297,   372,
     534,-32768,-32768,    74,    79,-32768,-32768,    70,-32768,   163,
     163,   917,   108,    62,   103,-32768,-32768,-32768,-32768,  1355,
    1355,  1355,  1355,    70,-32768,-32768,-32768,-32768,   372,   372,
     372,-32768,-32768,   114,   118,-32768,   130,   146,   168,   175,
    1550,-32768,-32768,-32768,-32768,-32768,   163,  1586,  1586,  1622,
     842,  1658,  1658,-32768,-32768,-32768,-32768,-32768,   221,-32768,
  -32768,   192,   -29,  1658,-32768,   161,   216,   136,   196,   209,
     204,   230,   167,   262,   -35,-32768,-32768,   248,   247,  1439,
     250,-32768,  1381,   251,    43,-32768,-32768,    43,   147,-32768,
     246,     6,-32768,-32768,-32768,-32768,   249,   249,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   842,
  -32768,-32768,   842,-32768,-32768,   842,-32768,-32768,   256,   258,
     259,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   163,  1658,
    1658,   163,-32768,-32768,  1658,-32768,  1658,  1658,  1658,  1658,
    1658,  1658,  1658,  1658,  1658,  1658,  1658,  1658,  1658,  1658,
    1658,-32768,  1439,-32768,  1439,   246,-32768,-32768,-32768,    43,
  -32768,-32768,    43,-32768,-32768,   453,   260,-32768,  1121,-32768,
  -32768,-32768,   246,-32768,-32768,-32768,-32768,-32768,    15,    15,
     268,   272,   273,   265,-32768,   536,-32768,-32768,   264,   274,
  -32768,   275,-32768,-32768,-32768,-32768,-32768,   161,   161,   216,
     136,   196,   209,   204,   230,   167,   262,-32768,   266,-32768,
  -32768,-32768,   123,   -36,-32768,-32768,   246,-32768,-32768,    13,
  -32768,-32768,   265,-32768,   260,-32768,-32768,-32768,  1297,    83,
     281,  1181,-32768,-32768,   286,-32768,   276,   286,   287,   287,
     287,   163,   265,   617,   -21,    13,-32768,  1658,-32768,-32768,
    1658,   148,  1694,-32768,   246,-32768,-32768,   277,  1658,   163,
     294,-32768,   453,    99,-32768,   617,-32768,   103,-32768,   -22,
     140,-32768,-32768,-32768,-32768,-32768,-32768,   992,-32768,   288,
     291,  1658,   293,-32768,   -18,   300,   285,  1658,   289,   306,
    1440,   -20,   290,   308,   309,  1658,   295,   296,   297,   292,
  -32768,-32768,-32768,-32768,   692,   314,-32768,-32768,-32768,-32768,
  -32768,   163,-32768,   294,-32768,-32768,-32768,  1061,  1476,-32768,
     318,   158,   322,-32768,    41,-32768,   217,   327,-32768,-32768,
  -32768,   328,-32768,   360,    43,   381,  1730,    83,    83,    83,
      36,    52,-32768,-32768,-32768,   163,-32768,-32768,-32768,-32768,
    1658,-32768,    -8,  1440,  1658,   369,  1658,   320,-32768,  1658,
     767,   321,  1440,-32768,-32768,-32768,-32768,   336,   158,-32768,
    1239,   342,-32768,-32768,   343,-32768,-32768,-32768,  1658,-32768,
     453,-32768,-32768,    83,-32768,   185,  1658,  1658,  1513,   347,
  -32768,-32768,-32768,  1658,   335,-32768,-32768,-32768,   344,  1658,
    1440,-32768,   355,   357,   338,-32768,   358,   340,  1658,-32768,
  -32768,-32768,-32768,-32768,-32768,   362,-32768,-32768,   158,   158,
     158,   359,-32768,-32768,   163,-32768,   365,   366,-32768,-32768,
  -32768,  1658,-32768,  1440,   345,-32768,  1440,  1658,-32768,  1440,
    1658,   350,   194,  1239,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,    83,    83,-32768,-32768,-32768,  1440,-32768,   370,   403,
     353,  1658,-32768,    78,-32768,-32768,    83,    83,-32768,-32768,
  -32768,   354,  1440,  1658,   374,-32768,   246,-32768,-32768,-32768,
  -32768,-32768,   375,  1440,    83,   376,   127,  1440,-32768,-32768,
  -32768,-32768,   246,-32768,-32768,    83,    83,   378,-32768,-32768,
  -32768,    83,-32768,   445,   447,-32768
};

static const short yypgoto[] =
{
  -32768,   299,   399,  -278,-32768,-32768,  -375,   -26,-32768,-32768,
  -32768,-32768,   -62,-32768,   -75,   111,   298,   261,   303,   307,
     310,   311,   315,   283,-32768,  -231,  -116,    96,-32768,-32768,
     -58,  -182,  -272,     4,     0,   162,   241,   225,   193,-32768,
  -32768,-32768,   -32,   280,  1739,-32768,-32768,   284,-32768,-32768,
  -32768,-32768,   439,   231,   337,-32768,-32768,-32768,   164,-32768,
     382,   105,   304,-32768,-32768,    10,-32768,-32768,-32768,   448,
     279,-32768,   121,-32768,    17,-32768,  1744,   -57,  -134,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,  -233,-32768,-32768,-32768,
    -257,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   -25,-32768,
  -32768,-32768,  -121,  -194,  -190,-32768,   199,  -310,-32768,-32768,
  -32768,    27,-32768,   -86,  -200,  -251,-32768,-32768,-32768,-32768,
    -377,-32768,-32768,    42,  -291,   226,-32768,   155,-32768,   211,
    -259,-32768,     5,-32768,   301,-32768,   302,   240,-32768,   207,
     179,-32768,-32768,-32768,-32768,-32768,   513,-32768,-32768,-32768,
  -32768,-32768,-32768
};


#define	YYLAST		1824


static const short yytable[] =
{
      34,    57,    64,   128,    33,   264,   304,   138,   434,   332,
     386,   262,   305,   198,   169,   263,   282,   258,    73,   219,
    -208,   378,    55,    56,    53,   182,   172,   173,   160,   301,
     303,   302,   377,    88,    89,   163,   164,   166,   185,   171,
     171,   462,   168,   361,   382,   449,   361,   199,    55,    56,
      34,   171,   406,    54,    33,   183,    71,    55,    56,   397,
      16,    17,    18,   240,   362,   402,    79,   399,   243,   365,
     161,   220,    59,   230,   436,   450,   231,   373,   132,   232,
     308,   405,   309,    60,   259,   417,    71,    71,    71,    71,
      61,   494,   495,   496,   428,    79,    79,    79,   205,   270,
     373,   168,    30,   134,   168,   170,   373,   168,   137,   429,
     262,   244,   245,   246,   263,   221,   445,   132,    83,   443,
      55,    56,   241,    84,   171,   171,   171,   171,   171,   171,
     171,   171,   171,   171,   171,   171,   171,   446,   303,   472,
    -146,   219,   134,   301,   451,   302,   204,   136,   319,   132,
     320,   209,   237,   460,   211,   242,   471,    16,    17,    18,
     296,   541,   384,   411,   170,   280,   308,   170,   309,    91,
     170,   480,   135,   171,   134,   137,   132,   484,   266,   132,
     153,   364,   132,   379,   154,   303,   369,  -248,  -108,  -248,
    -210,   485,   301,   191,   302,   137,   270,   373,    66,    30,
     155,   134,   283,   283,   134,    55,    56,   134,    66,   503,
      66,  -111,   373,  -210,   366,  -210,   156,  -320,   373,   204,
    -210,   204,   276,   424,   505,   302,   209,   507,   457,   268,
     509,   215,  -111,   186,   157,   303,   303,   303,   171,   187,
     188,   158,   176,   177,   178,   317,   171,   520,   196,   474,
     373,   475,   192,   440,   441,   442,   526,   179,  -242,   180,
    -242,   181,   305,   531,   193,   333,   137,   174,   175,   171,
     369,   148,   149,   150,   538,   171,   491,   194,   544,   542,
     303,   326,   318,   375,   308,   305,   309,    75,    -6,    76,
     189,   190,   514,   172,   142,   143,   144,   145,   262,   473,
     247,   248,   513,   303,   146,   147,   171,   260,   510,   261,
     195,   197,   200,   201,   270,   407,  -247,   207,   137,   224,
     476,   477,   234,    70,   235,   236,   291,   326,   297,   524,
     272,   454,   262,   444,   288,   416,   536,   211,   289,   290,
     298,   532,   448,   299,   171,   129,   452,   324,   262,   300,
     329,   456,   536,    70,    70,    70,    70,   295,   376,    -6,
     331,   215,   396,   172,   398,   400,   171,   518,   519,   283,
     401,   404,   403,   409,   410,   408,   171,   413,   -15,   -14,
     412,   171,   528,   529,   129,   415,   423,   171,   427,    16,
      17,    18,    19,    20,    21,    22,    23,    24,   431,   432,
     539,   211,    91,   437,   453,   455,   459,   461,   467,   366,
     483,   548,   549,   202,   458,   479,   129,   552,   481,   171,
     464,   486,   487,   488,   489,   490,   493,   497,   506,   508,
      29,    30,   492,   499,   500,   511,   521,   522,   523,   530,
     533,   537,   540,   129,   550,   554,   129,   555,   498,   129,
     227,    -2,     1,   250,     2,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
     151,   256,   439,    74,   226,    90,   202,   525,   202,   249,
     267,   394,   504,   464,    28,    91,   251,    92,    93,    94,
      95,   252,    96,    97,    98,   253,    87,   254,   287,    29,
      30,    31,   255,   265,   206,    99,   447,   547,   100,   385,
     515,   363,   381,   269,   380,   101,   102,   103,   104,   105,
     106,   430,   334,   414,    -1,     1,    32,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    81,     0,     0,     0,     0,    90,     0,
       0,     0,     0,     0,   315,   316,     0,    28,    91,     0,
      92,    93,    94,    95,     0,    96,    97,    98,     0,     0,
       0,     0,    29,    30,    31,     0,     0,     0,    99,     0,
       0,   100,     0,     0,     0,     0,   295,     0,   101,   102,
     103,   104,   105,   106,     0,     0,     0,     0,     0,    32,
       2,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,   335,   336,   337,    90,
     338,     0,   339,   340,   341,   342,   343,   344,   345,   346,
     347,    92,    93,    94,    95,     0,    96,    97,    98,     0,
       0,     0,     0,     0,     0,    29,    30,    31,     0,    99,
       0,     0,   100,     0,     0,     0,     0,   167,  -297,   101,
     102,   103,   104,   105,   106,     2,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,   335,   336,   337,    90,   338,     0,   339,   340,   341,
     342,   343,   344,   345,   346,   347,    92,    93,    94,    95,
       0,    96,    97,    98,     0,     0,     0,     0,     0,     0,
      29,    30,    31,     0,    99,     0,     0,   100,     0,     0,
       0,     0,   167,  -298,   101,   102,   103,   104,   105,   106,
       2,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,     0,     0,     0,    90,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    91,
      28,    92,    93,    94,    95,     0,    96,    97,    98,     0,
       0,     0,     0,     0,     0,    29,    30,    31,     0,    99,
       0,     0,   100,     0,     0,     0,     0,     0,     0,   101,
     102,   103,   104,   105,   106,     2,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,     0,     0,     0,     0,     0,     0,    25,    26,
      27,     0,     0,     0,    90,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    91,    28,    92,    93,    94,    95,
       0,    96,    97,    98,     0,     0,     0,     0,     0,     0,
       0,    30,    31,     0,    99,     0,     0,   100,     0,     0,
       0,     0,   167,     0,   101,   102,   103,   104,   105,   106,
       2,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,     0,     0,     0,
       0,     0,     0,    25,    26,    27,     0,     0,     0,    90,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    91,
      28,    92,    93,    94,    95,     0,    96,    97,    98,     0,
       0,     0,     0,     0,     0,     0,    30,    31,     0,    99,
       0,     0,   100,     0,     0,     0,     0,     0,     0,   101,
     102,   103,   104,   105,   106,     2,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    28,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      29,    30,    31,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   419,   393,  -235,  -235,  -235,  -235,  -235,  -235,
    -235,  -235,  -235,  -235,  -235,  -235,  -235,  -235,  -235,  -235,
    -235,  -235,  -235,  -235,  -235,  -235,  -235,  -235,  -235,  -235,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -235,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -235,     0,     0,     0,     0,  -235,
    -235,  -235,   275,     0,     2,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    28,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    29,
      30,    31,   325,     0,     2,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    28,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    29,
      30,    31,     2,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    28,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   463,     0,     0,     0,     0,    29,    30,    31,
       2,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      28,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    29,    30,    31,     2,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,     2,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,     0,     0,     0,     0,     0,     0,    25,    26,    27,
       0,     0,     0,    29,    30,    31,     0,     0,     0,     0,
       0,     0,     0,     0,    28,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      30,    31,     2,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,     0,
       0,     0,     0,     0,     0,    25,    26,    27,     0,   335,
     336,   337,    90,   338,     0,   339,   340,   341,   342,   343,
     344,   345,   346,    56,    92,    93,    94,    95,     0,    96,
      97,    98,     0,     0,     0,     0,     0,     0,    30,    31,
       0,     0,    99,     0,     0,   100,     0,     0,    90,     0,
     167,     0,   101,   102,   103,   104,   105,   106,    91,     0,
      92,    93,    94,    95,     0,    96,    97,    98,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    99,     0,
       0,   100,     0,     0,   422,    90,     0,     0,   101,   102,
     103,   104,   105,   106,     0,    91,     0,    92,    93,    94,
      95,     0,    96,    97,    98,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    99,     0,     0,   100,     0,
       0,   478,    90,     0,     0,   101,   102,   103,   104,   105,
     106,     0,    91,     0,    92,    93,    94,    95,     0,    96,
      97,    98,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    99,     0,     0,   159,     0,     0,    90,     0,
       0,     0,   101,   102,   103,   104,   105,   106,    91,     0,
      92,    93,    94,    95,     0,    96,    97,    98,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    99,     0,
       0,   162,     0,     0,    90,     0,     0,     0,   101,   102,
     103,   104,   105,   106,    91,     0,    92,    93,    94,    95,
       0,    96,    97,    98,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    99,     0,     0,   165,     0,     0,
      90,     0,     0,     0,   101,   102,   103,   104,   105,   106,
      91,     0,    92,    93,    94,    95,     0,    96,    97,    98,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      99,     0,     0,   100,     0,     0,    90,     0,     0,     0,
     101,   102,   103,   104,   105,   106,    91,     0,    92,    93,
      94,    95,     0,    96,    97,    98,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    99,     0,     0,   100,
       0,     0,    90,     0,     0,     0,   368,   102,   103,   104,
     105,   106,    91,     0,    92,    93,    94,    95,    69,    96,
      97,    98,     0,    72,     0,     0,     0,     0,    78,     0,
       0,     0,    99,    80,     0,   100,     0,     0,     0,     0,
       0,     0,   438,   102,   103,   104,   105,   106,    69,    69,
      69,    69,     0,    72,    72,    72,    72,    78,    78,    78,
       0,     0,    80,    80,    80
};

static const short yycheck[] =
{
       0,    27,    34,    61,     0,   205,   263,    64,   383,   287,
     320,   205,   263,    48,   100,   205,     1,   199,    44,   140,
      42,   312,    42,    43,    65,    54,   101,   102,    90,    65,
     263,    67,   310,    59,    60,    97,    98,    99,   113,   101,
     102,   418,   100,    64,    66,    53,    64,    82,    42,    43,
      50,   113,    72,    65,    50,    84,    39,    42,    43,   331,
      17,    18,    19,   179,    85,   337,    49,    85,   184,   300,
      96,    65,    65,   159,   384,    83,   162,   308,    61,   165,
      67,   340,    69,    65,   200,   363,    69,    70,    71,    72,
      65,   468,   469,   470,    53,    78,    79,    80,   130,   215,
     331,   159,    59,    61,   162,   100,   337,   165,    72,    68,
     304,   186,   187,   188,   304,   141,    64,   100,    44,    83,
      42,    43,   180,    44,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,    85,   371,   430,
      70,   262,   100,    65,   403,    67,   129,    85,    65,   132,
      67,   134,   178,   412,   137,   181,   428,    17,    18,    19,
     235,   536,    22,   345,   159,   222,    67,   162,    69,    42,
     165,   443,    64,   235,   132,    72,   159,   449,   210,   162,
      66,   297,   165,    84,    66,   418,   302,    64,    85,    66,
      42,   450,    65,    57,    67,    72,   312,   428,    36,    59,
      70,   159,   228,   229,   162,    42,    43,   165,    46,   481,
      48,    64,   443,    65,    66,    67,    70,    70,   449,   202,
      72,   204,   218,    65,   483,    67,   209,   486,   410,   212,
     489,    84,    85,    72,    66,   468,   469,   470,   300,    78,
      79,    66,    50,    51,    52,   277,   308,   506,    81,    64,
     481,    66,    56,   387,   388,   389,   513,    65,    64,    67,
      66,    69,   513,   522,    55,   291,    72,    46,    47,   331,
     386,    78,    79,    80,   533,   337,   458,    73,   537,   536,
     513,   281,   278,   309,    67,   536,    69,    46,    71,    48,
      74,    75,   492,   368,    69,    70,    71,    72,   492,   433,
     189,   190,   492,   536,    73,    74,   368,   202,   490,   204,
      80,    49,    64,    66,   430,   341,    66,    66,    72,    70,
     436,   437,    66,    39,    66,    66,    61,   327,    64,   511,
      70,   406,   526,   390,    66,   361,   526,   320,    66,    66,
      66,   523,   400,    68,   406,    61,   404,    66,   542,    83,
      64,   409,   542,    69,    70,    71,    72,    70,    64,    71,
      84,    84,    71,   438,    71,    65,   428,   501,   502,   395,
      85,    65,    83,    65,    65,    85,   438,    85,    83,    83,
      83,   443,   516,   517,   100,    71,    68,   449,    66,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    71,    71,
     534,   384,    42,    22,    35,    85,    85,    71,    66,    66,
      66,   545,   546,   129,   410,    68,   132,   551,    83,   481,
     420,    66,    65,    85,    66,    85,    64,    68,    83,   487,
      58,    59,   464,    68,    68,    85,    66,    34,    85,    85,
      66,    66,    66,   159,    66,     0,   162,     0,   474,   165,
     151,     0,     1,   192,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      81,   198,   386,    44,   147,    32,   202,   513,   204,   191,
     210,   327,   482,   493,    43,    42,   193,    44,    45,    46,
      47,   194,    49,    50,    51,   195,    58,   196,   229,    58,
      59,    60,   197,   209,   132,    62,   395,   542,    65,   320,
     493,   295,   315,    70,   313,    72,    73,    74,    75,    76,
      77,   376,   292,   354,     0,     1,    85,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    50,    -1,    -1,    -1,    -1,    32,    -1,
      -1,    -1,    -1,    -1,   272,   274,    -1,    43,    42,    -1,
      44,    45,    46,    47,    -1,    49,    50,    51,    -1,    -1,
      -1,    -1,    58,    59,    60,    -1,    -1,    -1,    62,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    70,    -1,    72,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    -1,    -1,    85,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    -1,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    -1,    49,    50,    51,    -1,
      -1,    -1,    -1,    -1,    -1,    58,    59,    60,    -1,    62,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    70,    71,    72,
      73,    74,    75,    76,    77,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    -1,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      -1,    49,    50,    51,    -1,    -1,    -1,    -1,    -1,    -1,
      58,    59,    60,    -1,    62,    -1,    -1,    65,    -1,    -1,
      -1,    -1,    70,    71,    72,    73,    74,    75,    76,    77,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    -1,    -1,    32,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
      43,    44,    45,    46,    47,    -1,    49,    50,    51,    -1,
      -1,    -1,    -1,    -1,    -1,    58,    59,    60,    -1,    62,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    -1,    72,
      73,    74,    75,    76,    77,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    -1,    -1,    -1,    -1,    -1,    -1,    26,    27,
      28,    -1,    -1,    -1,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    44,    45,    46,    47,
      -1,    49,    50,    51,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    59,    60,    -1,    62,    -1,    -1,    65,    -1,    -1,
      -1,    -1,    70,    -1,    72,    73,    74,    75,    76,    77,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    -1,    -1,    -1,
      -1,    -1,    -1,    26,    27,    28,    -1,    -1,    -1,    32,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
      43,    44,    45,    46,    47,    -1,    49,    50,    51,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    59,    60,    -1,    62,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    -1,    72,
      73,    74,    75,    76,    77,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      58,    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     1,    71,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,    58,
      59,    60,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,
      59,    60,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,
      59,    60,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    53,    -1,    -1,    -1,    -1,    58,    59,    60,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    58,    59,    60,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    -1,    -1,    -1,    -1,    -1,    -1,    26,    27,    28,
      -1,    -1,    -1,    58,    59,    60,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      59,    60,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    -1,
      -1,    -1,    -1,    -1,    -1,    26,    27,    28,    -1,    29,
      30,    31,    32,    33,    -1,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    -1,    49,
      50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    59,    60,
      -1,    -1,    62,    -1,    -1,    65,    -1,    -1,    32,    -1,
      70,    -1,    72,    73,    74,    75,    76,    77,    42,    -1,
      44,    45,    46,    47,    -1,    49,    50,    51,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    62,    -1,
      -1,    65,    -1,    -1,    68,    32,    -1,    -1,    72,    73,
      74,    75,    76,    77,    -1,    42,    -1,    44,    45,    46,
      47,    -1,    49,    50,    51,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    62,    -1,    -1,    65,    -1,
      -1,    68,    32,    -1,    -1,    72,    73,    74,    75,    76,
      77,    -1,    42,    -1,    44,    45,    46,    47,    -1,    49,
      50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    62,    -1,    -1,    65,    -1,    -1,    32,    -1,
      -1,    -1,    72,    73,    74,    75,    76,    77,    42,    -1,
      44,    45,    46,    47,    -1,    49,    50,    51,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    62,    -1,
      -1,    65,    -1,    -1,    32,    -1,    -1,    -1,    72,    73,
      74,    75,    76,    77,    42,    -1,    44,    45,    46,    47,
      -1,    49,    50,    51,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    62,    -1,    -1,    65,    -1,    -1,
      32,    -1,    -1,    -1,    72,    73,    74,    75,    76,    77,
      42,    -1,    44,    45,    46,    47,    -1,    49,    50,    51,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      62,    -1,    -1,    65,    -1,    -1,    32,    -1,    -1,    -1,
      72,    73,    74,    75,    76,    77,    42,    -1,    44,    45,
      46,    47,    -1,    49,    50,    51,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    62,    -1,    -1,    65,
      -1,    -1,    32,    -1,    -1,    -1,    72,    73,    74,    75,
      76,    77,    42,    -1,    44,    45,    46,    47,    39,    49,
      50,    51,    -1,    39,    -1,    -1,    -1,    -1,    49,    -1,
      -1,    -1,    62,    49,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    -1,    72,    73,    74,    75,    76,    77,    69,    70,
      71,    72,    -1,    69,    70,    71,    72,    78,    79,    80,
      -1,    -1,    78,    79,    80
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "cfe/c/bison.simple.c"

/* Skeleton output parser for bison,

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002 Free Software
   Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser when
   the %semantic_parser declaration is not specified in the grammar.
   It was written by Richard Stallman by simplifying the hairy parser
   used when %semantic_parser is specified.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

#if ! defined (yyoverflow) || defined (YYERROR_VERBOSE)

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# if YYSTACK_USE_ALLOCA
#  define YYSTACK_ALLOC alloca
# else
#  ifndef YYSTACK_USE_ALLOCA
#   if defined (alloca) || defined (_ALLOCA_H)
#    define YYSTACK_ALLOC alloca
#   else
#    ifdef __GNUC__
#     define YYSTACK_ALLOC __builtin_alloca
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
# else
#  if defined (__STDC__) || defined (__cplusplus)
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
#  endif
#  define YYSTACK_ALLOC malloc
#  define YYSTACK_FREE free
# endif
#endif /* ! defined (yyoverflow) || defined (YYERROR_VERBOSE) */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
         || (YYLTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short yyss;
  YYSTYPE yyvs;
# if YYLSP_NEEDED
  YYLTYPE yyls;
# endif
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAX (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# if YYLSP_NEEDED
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE) + sizeof (YYLTYPE))      \
      + 2 * YYSTACK_GAP_MAX)
# else
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE))                         \
      + YYSTACK_GAP_MAX)
# endif

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)              \
      do                                        \
        {                                       \
          register YYSIZE_T yyi;                \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (To)[yyi] = (From)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)                                        \
    do                                                                  \
      {                                                                 \
        YYSIZE_T yynewbytes;                                            \
        YYCOPY (&yyptr->Stack, Stack, yysize);                          \
        Stack = &yyptr->Stack;                                          \
        yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAX;   \
        yyptr += yynewbytes / sizeof (*yyptr);                          \
      }                                                                 \
    while (0)

#endif


#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# if defined (__STDC__) || defined (__cplusplus)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         -2
#define YYEOF           0
#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrlab1
/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL          goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY && yylen == 1)                          \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      yychar1 = YYTRANSLATE (yychar);                           \
      YYPOPSTACK;                                               \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
      yyerror ("syntax error: cannot back up");                 \
      YYERROR;                                                  \
    }                                                           \
while (0)

#define YYTERROR        1
#define YYERRCODE       256


/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).

   When YYLLOC_DEFAULT is run, CURRENT is set the location of the
   first token.  By default, to implement support for ranges, extend
   its range to the last symbol.  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)        \
   Current.last_line   = Rhs[N].last_line;      \
   Current.last_column = Rhs[N].last_column;
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#if YYPURE
# if YYLSP_NEEDED
#  ifdef YYLEX_PARAM
#   define YYLEX                yylex (&yylval, &yylloc, YYLEX_PARAM)
#  else
#   define YYLEX                yylex (&yylval, &yylloc)
#  endif
# else /* !YYLSP_NEEDED */
#  ifdef YYLEX_PARAM
#   define YYLEX                yylex (&yylval, YYLEX_PARAM)
#  else
#   define YYLEX                yylex (&yylval)
#  endif
# endif /* !YYLSP_NEEDED */
#else /* !YYPURE */
# define YYLEX                  yylex ()
#endif /* !YYPURE */


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)
/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
#endif /* !YYDEBUG */

/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#if YYMAXDEPTH == 0
# undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif

#ifdef YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  register const char *yys = yystr;

  while (*yys++ != '\0')
    continue;

  return yys - yystr - 1;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  register char *yyd = yydest;
  register const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif
#endif

#line 315 "cfe/c/bison.simple.c"


/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
#  define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL
# else
#  define YYPARSE_PARAM_ARG YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
# endif
#else /* !YYPARSE_PARAM */
# define YYPARSE_PARAM_ARG
# define YYPARSE_PARAM_DECL
#endif /* !YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
# ifdef YYPARSE_PARAM
int yyparse (void *);
# else
int yyparse (void);
# endif
#endif

/* YY_DECL_VARIABLES -- depending whether we use a pure parser,
   variables are global, or local to YYPARSE.  */

#define YY_DECL_NON_LSP_VARIABLES                       \
/* The lookahead symbol.  */                            \
int yychar;                                             \
                                                        \
/* The semantic value of the lookahead symbol. */       \
YYSTYPE yylval;                                         \
                                                        \
/* Number of parse errors so far.  */                   \
int yynerrs;

#if YYLSP_NEEDED
# define YY_DECL_VARIABLES                      \
YY_DECL_NON_LSP_VARIABLES                       \
                                                \
/* Location data for the lookahead symbol.  */  \
YYLTYPE yylloc;
#else
# define YY_DECL_VARIABLES                      \
YY_DECL_NON_LSP_VARIABLES
#endif


/* If nonreentrant, generate the variables here. */

#if !YYPURE
YY_DECL_VARIABLES
#endif  /* !YYPURE */


// extern void yy_mark ( unsigned typ, const YYSTYPE * pval );

//--------------------------------------------------------------------------
// Name         yy_mark_stack
//
// 
//--------------------------------------------------------------------------
static void  yy_mark_stack ( 
    const short   * yyss,    // state stack
    const YYSTYPE * yyvs,    // semantic value stack
    unsigned        depth,   // depth of the stack (yyssp - yyss + 1)
    int             yychar,
    const YYSTYPE * pyylval

  )
{
  unsigned typ;

  // Mark the current character
  //
  if (0 != (typ = yytoktyp[YYTRANSLATE( yychar )]) )
    yy_mark( typ, pyylval );

  // Mark the stack
  //
  for ( ; depth-- > 0; ++yyss, ++yyvs )
  {
    if (0 != (typ = yystatetyp[*yyss]) )
      yy_mark( typ, yyvs );
  }
};

#define YY_MARK_STACK()  yy_mark_stack( yyss, yyvs, yyssp - yyss + 1, yychar, &yylval )

int
yyparse (YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  /* If reentrant, generate the variables here. */
#if YYPURE
  YY_DECL_VARIABLES
#endif  /* !YYPURE */

  register int yystate;
  register int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Lookahead token as an internal (translated) token number.  */
  int yychar1 = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack. */
  short yyssa[YYINITDEPTH];
  short *yyss = yyssa;
  register short *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  register YYSTYPE *yyvsp;

#if YYLSP_NEEDED
  /* The location stack.  */
  YYLTYPE yylsa[YYINITDEPTH];
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;
#endif

#if YYLSP_NEEDED
# define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
# define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  YYSIZE_T yystacksize = YYINITDEPTH;


  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
#if YYLSP_NEEDED
  YYLTYPE yyloc;
#endif

  /* When reducing, the number of symbols on the RHS of the reduced
     rule. */
  int yylen;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;             /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;
#if YYLSP_NEEDED
  yylsp = yyls;
#endif
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
        /* Give user a chance to reallocate the stack. Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        YYSTYPE *yyvs1 = yyvs;
        short *yyss1 = yyss;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  */
# if YYLSP_NEEDED
        YYLTYPE *yyls1 = yyls;
        /* This used to be a conditional around just the two extra args,
           but that might be undefined if yyoverflow is a macro.  */
        yyoverflow ("parser stack overflow",
                    &yyss1, yysize * sizeof (*yyssp),
                    &yyvs1, yysize * sizeof (*yyvsp),
                    &yyls1, yysize * sizeof (*yylsp),
                    &yystacksize);
        yyls = yyls1;
# else
        yyoverflow ("parser stack overflow",
                    &yyss1, yysize * sizeof (*yyssp),
                    &yyvs1, yysize * sizeof (*yyvsp),
                    &yystacksize);
# endif
        yyss = yyss1;
        yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyoverflowlab;
# else
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
        goto yyoverflowlab;
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
        yystacksize = YYMAXDEPTH;

      {
        short *yyss1 = yyss;
        union yyalloc *yyptr =
          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
        if (! yyptr)
          goto yyoverflowlab;
        YYSTACK_RELOCATE (yyss);
        YYSTACK_RELOCATE (yyvs);
# if YYLSP_NEEDED
        YYSTACK_RELOCATE (yyls);
# endif
# undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
#if YYLSP_NEEDED
      yylsp = yyls + yysize - 1;
#endif

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
                  (unsigned long int) yystacksize));

      if (yyssp >= yyss + yystacksize - 1)
        YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)              /* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;           /* Don't call YYLEX any more */

      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yychar1 = YYTRANSLATE (yychar);

#if YYDEBUG
     /* We have to keep this `#if YYDEBUG', since we use variables
        which are defined only if `YYDEBUG' is set.  */
      if (yydebug)
        {
          YYFPRINTF (stderr, "Next token is %d (%s",
                     yychar, yytname[yychar1]);
          /* Give the individual parser a way to print the precise
             meaning of a token, for further debugging info.  */
# ifdef YYPRINT
          YYPRINT (stderr, yychar, yylval);
# endif
          YYFPRINTF (stderr, ")\n");
        }
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */
  YYDPRINTF ((stderr, "Shifting token %d (%s), ",
              yychar, yytname[yychar1]));

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to the semantic value of
     the lookahead token.  This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

#if YYLSP_NEEDED
  /* Similarly for the default location.  Let the user run additional
     commands if for instance locations are ranges.  */
  yyloc = yylsp[1-yylen];
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
#endif

#if YYDEBUG
  /* We have to keep this `#if YYDEBUG', since we use variables which
     are defined only if `YYDEBUG' is set.  */
  if (yydebug)
    {
      int yyi;

      YYFPRINTF (stderr, "Reducing via rule %d (line %d), ",
                 yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (yyi = yyprhs[yyn]; yyrhs[yyi] > 0; yyi++)
        YYFPRINTF (stderr, "%s ", yytname[yyrhs[yyi]]);
      YYFPRINTF (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif

  switch (yyn) {

case 1:
#line 163 "cfe/c/c.y"
{ Dump_Init(); Dump_TScope( CfeRoots.GlobalScope ); ;
    break;}
case 3:
#line 174 "cfe/c/c.y"
{
      // Is it time to collect ?
      // In debug builds we always perform a full collection to make sure
      // there isn't a marking bug.
      //
#ifdef _DEBUG
      if (GcCollectStart( true )) 
#else
      if (GcCollectStart( false )) 
#endif
      {
        YY_MARK_STACK();   // mark the contents of the parser stack
        Cfe_GcMarkRoots(); // mark all C front-end data

        GcCollectEnd();
      }
    ;
    break;}
case 4:
#line 202 "cfe/c/c.y"
{
      ASSERT( CfeRoots.CurScope != NULL );
      while ( CfeRoots.CurScope->disposition != SCOPE_FILE)
      {
        TRACE0( "***Warning: popping extra scopes at file level!!\n" );
        SymTab_PopScope();
      }
    ;
    break;}
case 11:
#line 244 "cfe/c/c.y"
{ TODO_BAD("combine the strings") ;
    break;}
case 12:
#line 246 "cfe/c/c.y"
{ TODO_BAD("combine the strings") ;
    break;}
case 14:
#line 281 "cfe/c/c.y"
{ yyval.str = yyvsp[0].sym->id.strName ;
    break;}
case 16:
#line 292 "cfe/c/c.y"
{yyval.ast = Expr_ident( &yylsp[0], yyvsp[0].str );
    break;}
case 18:
#line 294 "cfe/c/c.y"
{TODO_BAD("");;
    break;}
case 19:
#line 295 "cfe/c/c.y"
{ yyval.ast = yyvsp[-1].ast; ;
    break;}
case 20:
#line 297 "cfe/c/c.y"
{TODO_BAD("");;
    break;}
case 22:
#line 303 "cfe/c/c.y"
{TODO_BAD("");;
    break;}
case 23:
#line 304 "cfe/c/c.y"
{TODO_BAD("");;
    break;}
case 24:
#line 305 "cfe/c/c.y"
{TODO_BAD("");;
    break;}
case 25:
#line 306 "cfe/c/c.y"
{TODO_BAD("");;
    break;}
case 26:
#line 307 "cfe/c/c.y"
{TODO_BAD("");;
    break;}
case 27:
#line 308 "cfe/c/c.y"
{TODO_BAD("");;
    break;}
case 28:
#line 309 "cfe/c/c.y"
{TODO_BAD("");;
    break;}
case 29:
#line 313 "cfe/c/c.y"
{TODO_BAD("");;
    break;}
case 30:
#line 314 "cfe/c/c.y"
{TODO_BAD("");;
    break;}
case 34:
#line 325 "cfe/c/c.y"
{TODO_BAD("");;
    break;}
case 35:
#line 326 "cfe/c/c.y"
{TODO_BAD("");;
    break;}
case 36:
#line 327 "cfe/c/c.y"
{yyval.ast = Expr_deref( &yylsp[-1], yyvsp[0].ast );
    break;}
case 37:
#line 328 "cfe/c/c.y"
{yyval.ast = Expr_addr( &yylsp[-1], yyvsp[0].ast );
    break;}
case 38:
#line 329 "cfe/c/c.y"
{TODO_BAD("");;
    break;}
case 39:
#line 330 "cfe/c/c.y"
{TODO_BAD("");;
    break;}
case 40:
#line 331 "cfe/c/c.y"
{TODO_BAD("");;
    break;}
case 41:
#line 334 "cfe/c/c.y"
{TODO_BAD("");;
    break;}
case 42:
#line 335 "cfe/c/c.y"
{TODO_BAD("");;
    break;}
case 43:
#line 336 "cfe/c/c.y"
{TODO_BAD("");;
    break;}
case 49:
#line 347 "cfe/c/c.y"
{TODO_BAD("");;
    break;}
case 51:
#line 353 "cfe/c/c.y"
{yyval.ast = Expr_mul( &yylsp[-1], yyvsp[-2].ast, yyvsp[0].ast );
    break;}
case 52:
#line 354 "cfe/c/c.y"
{TODO_BAD("");;
    break;}
case 53:
#line 355 "cfe/c/c.y"
{TODO_BAD("");;
    break;}
case 55:
#line 361 "cfe/c/c.y"
{TODO_BAD("");;
    break;}
case 56:
#line 362 "cfe/c/c.y"
{TODO_BAD("");;
    break;}
case 58:
#line 368 "cfe/c/c.y"
{TODO_BAD("");;
    break;}
case 60:
#line 374 "cfe/c/c.y"
{TODO_BAD("");;
    break;}
case 62:
#line 380 "cfe/c/c.y"
{TODO_BAD("");;
    break;}
case 64:
#line 386 "cfe/c/c.y"
{yyval.ast = Expr_binAnd( &yylsp[-1], yyvsp[-2].ast, yyvsp[0].ast );
    break;}
case 66:
#line 392 "cfe/c/c.y"
{yyval.ast = Expr_binXor( &yylsp[-1], yyvsp[-2].ast, yyvsp[0].ast );
    break;}
case 68:
#line 398 "cfe/c/c.y"
{yyval.ast = Expr_binOr( &yylsp[-1], yyvsp[-2].ast, yyvsp[0].ast );
    break;}
case 70:
#line 404 "cfe/c/c.y"
{TODO_BAD("");;
    break;}
case 72:
#line 410 "cfe/c/c.y"
{TODO_BAD("");;
    break;}
case 74:
#line 417 "cfe/c/c.y"
{TODO_BAD("");;
    break;}
case 76:
#line 424 "cfe/c/c.y"
{yyval.ast = Expr_assign( &yylsp[-1], yyvsp[-2].ast, yyvsp[0].ast );
    break;}
case 77:
#line 428 "cfe/c/c.y"
{ yyval.ast = NULL ;
    break;}
case 82:
#line 439 "cfe/c/c.y"
{TODO_BAD("");;
    break;}
case 84:
#line 447 "cfe/c/c.y"
{yyval.ast = NULL;
    break;}
case 86:
#line 454 "cfe/c/c.y"
{
        TODO1( "fold" );
      ;
    break;}
case 87:
#line 495 "cfe/c/c.y"
{NO_RESULT;
    break;}
case 88:
#line 499 "cfe/c/c.y"
{ yyval.dspecs = DSpecs_GenType( yyvsp[0].dspecs ) ;
    break;}
case 89:
#line 516 "cfe/c/c.y"
{ yyval.dspecs = DSPECS_COMBINE( yyvsp[-1].dspecs, yyvsp[0].dspecs ) ;
    break;}
case 90:
#line 517 "cfe/c/c.y"
{ yyval.dspecs = DSPECS_COMBINE( yyvsp[-1].dspecs,      yyvsp[0].dspecs ) ;
    break;}
case 91:
#line 518 "cfe/c/c.y"
{ yyval.dspecs = DSPECS_COMBINE( yyvsp[-1].dspecs,          yyvsp[0].dspecs ) ;
    break;}
case 92:
#line 520 "cfe/c/c.y"
{ yyval.dspecs = DSPECS_COMBINE( yyvsp[-1].dspecs,          yyvsp[0].dspecs ) ;
    break;}
case 93:
#line 521 "cfe/c/c.y"
{ yyval.dspecs = DSPECS_COMBINE( yyvsp[-1].dspecs,            yyvsp[0].dspecs ) ;
    break;}
case 94:
#line 525 "cfe/c/c.y"
{ yyval.dspecs = NULL ;
    break;}
case 96:
#line 530 "cfe/c/c.y"
{ yyval.dspecs = NULL ;
    break;}
case 97:
#line 531 "cfe/c/c.y"
{ yyval.dspecs = DSPECS_COMBINE( yyvsp[-1].dspecs, yyvsp[0].dspecs ) ;
    break;}
case 98:
#line 532 "cfe/c/c.y"
{ yyval.dspecs = DSPECS_COMBINE( yyvsp[-1].dspecs,      yyvsp[0].dspecs ) ;
    break;}
case 99:
#line 533 "cfe/c/c.y"
{ yyval.dspecs = DSPECS_COMBINE( yyvsp[-1].dspecs,          yyvsp[0].dspecs ) ;
    break;}
case 100:
#line 534 "cfe/c/c.y"
{ yyval.dspecs = DSPECS_COMBINE( yyvsp[-1].dspecs,          yyvsp[0].dspecs ) ;
    break;}
case 101:
#line 538 "cfe/c/c.y"
{ yyval.dspecs = NULL ;
    break;}
case 102:
#line 539 "cfe/c/c.y"
{ yyval.dspecs = DSPECS_COMBINE( yyvsp[-1].dspecs, yyvsp[0].dspecs ) ;
    break;}
case 103:
#line 540 "cfe/c/c.y"
{ yyval.dspecs = DSPECS_COMBINE( yyvsp[-1].dspecs,      yyvsp[0].dspecs ) ;
    break;}
case 104:
#line 541 "cfe/c/c.y"
{ yyval.dspecs = DSPECS_COMBINE( yyvsp[-1].dspecs,          yyvsp[0].dspecs ) ;
    break;}
case 106:
#line 546 "cfe/c/c.y"
{yyval.dspecs=yyvsp[-2].dspecs;
    break;}
case 108:
#line 551 "cfe/c/c.y"
{
        Declare( yyvsp[-1].dspecs, New_TSymbol( NULL, yyvsp[0].typ ), NULL, false );
      ;
    break;}
case 110:
#line 558 "cfe/c/c.y"
{
        yyval.typ = yyvsp[0].dspecs->type;
      ;
    break;}
case 111:
#line 565 "cfe/c/c.y"
{
        Declare( yyvsp[-2].dspecs, yyvsp[0].sym, NULL, false );
      ;
    break;}
case 112:
#line 569 "cfe/c/c.y"
{ 
        TODO1( "handle the initializer" );
        Declare( yyvsp[-4].dspecs, yyvsp[-2].sym, NULL, true );
      ;
    break;}
case 113:
#line 577 "cfe/c/c.y"
{ yyval.dspecs = New_DSpecs( yyvsp[0].token ) ;
    break;}
case 120:
#line 599 "cfe/c/c.y"
{
        yyval.dspecs = New_DSpecs_ExtDeclSpec( ExtDeclSpec_Make( yyvsp[-1].str ) );
      ;
    break;}
case 121:
#line 618 "cfe/c/c.y"
{ yyval.dspecs = New_DSpecs( yyvsp[0].token ) ;
    break;}
case 126:
#line 625 "cfe/c/c.y"
{TODO;
    break;}
case 127:
#line 626 "cfe/c/c.y"
{TODO;
    break;}
case 140:
#line 647 "cfe/c/c.y"
{
        yyval.dspecs = New_DSpecs_ExtInt( yyvsp[-1].ast );
      ;
    break;}
case 141:
#line 655 "cfe/c/c.y"
{
        yyval.dspecs = New_DSpecs_ExtFloat( yyvsp[-1].ast );
      ;
    break;}
case 142:
#line 665 "cfe/c/c.y"
{
        const TTypeNode * tag = yyvsp[-1].tnode;
        if (tag->u.memberScope == NULL)
          MODIFY_TNODE(tag)->u.memberScope = yyvsp[0].scope;
        yyval.dspecs = New_DSpecs_Tag( tag );
      ;
    break;}
case 143:
#line 673 "cfe/c/c.y"
{
        const TTypeNode * tag = yyvsp[-1].tnode;
        if (tag->u.memberScope == NULL)
          MODIFY_TNODE(tag)->u.memberScope = yyvsp[0].scope;
        yyval.dspecs = New_DSpecs_Tag( tag );
      ;
    break;}
case 144:
#line 680 "cfe/c/c.y"
{
        yyval.dspecs = New_DSpecs_Tag( DeclareTag( yyvsp[-1].token, yyvsp[0].str, false ) );
      ;
    break;}
case 145:
#line 685 "cfe/c/c.y"
{ yyval.str = NULL ;
    break;}
case 146:
#line 688 "cfe/c/c.y"
{
        yyval.tnode = DeclareTag( yyvsp[-1].token, yyvsp[0].str, true )
      ;
    break;}
case 147:
#line 695 "cfe/c/c.y"
{ SymTab_PushNewScope( SCOPE_STRUCT ); ;
    break;}
case 148:
#line 698 "cfe/c/c.y"
{ 
          // Error recovery is handled in struct_declaration_list
          yyval.scope = SymTab_PopScope(); 
        ;
    break;}
case 154:
#line 727 "cfe/c/c.y"
{NO_RESULT;
    break;}
case 155:
#line 731 "cfe/c/c.y"
{ yyval.dspecs = DSpecs_GenType( yyvsp[0].dspecs ) ;
    break;}
case 156:
#line 742 "cfe/c/c.y"
{ yyval.dspecs = DSPECS_COMBINE( yyvsp[-1].dspecs, yyvsp[0].dspecs ) ;
    break;}
case 158:
#line 744 "cfe/c/c.y"
{ yyval.dspecs = DSPECS_COMBINE( yyvsp[-1].dspecs, yyvsp[0].dspecs ) ;
    break;}
case 159:
#line 745 "cfe/c/c.y"
{ yyval.dspecs = DSPECS_COMBINE( yyvsp[-1].dspecs,   yyvsp[0].dspecs ) ;
    break;}
case 160:
#line 749 "cfe/c/c.y"
{ yyval.dspecs = NULL ;
    break;}
case 161:
#line 750 "cfe/c/c.y"
{ yyval.dspecs = DSPECS_COMBINE( yyvsp[-1].dspecs, yyvsp[0].dspecs ) ;
    break;}
case 162:
#line 751 "cfe/c/c.y"
{ yyval.dspecs = DSPECS_COMBINE( yyvsp[-1].dspecs, yyvsp[0].dspecs ) ;
    break;}
case 163:
#line 755 "cfe/c/c.y"
{ yyval.dspecs = NULL ;
    break;}
case 164:
#line 756 "cfe/c/c.y"
{ yyval.dspecs = DSPECS_COMBINE( yyvsp[-1].dspecs, yyvsp[0].dspecs ) ;
    break;}
case 166:
#line 761 "cfe/c/c.y"
{yyval.dspecs=yyvsp[-2].dspecs;
    break;}
case 168:
#line 766 "cfe/c/c.y"
{
        Declare( yyvsp[-2].dspecs, yyvsp[0].sym, NULL, false );
      ;
    break;}
case 169:
#line 770 "cfe/c/c.y"
{
        Declare( yyvsp[-4].dspecs, yyvsp[-2].sym, yyvsp[0].ast, false );
      ;
    break;}
case 170:
#line 774 "cfe/c/c.y"
{
        Declare( yyvsp[-3].dspecs, New_TSymbol( NULL, yyvsp[-2].typ ), yyvsp[0].ast, false );
      ;
    break;}
case 171:
#line 782 "cfe/c/c.y"
{yyval.edesc=yyvsp[-1].edesc;
    break;}
case 172:
#line 783 "cfe/c/c.y"
{
        yyval.dspecs = New_DSpecs_Tag( DefineEnum( yyvsp[-5].edesc ) );
      ;
    break;}
case 173:
#line 787 "cfe/c/c.y"
{yyval.edesc=yyvsp[-1].edesc;
    break;}
case 174:
#line 788 "cfe/c/c.y"
{
        yyval.dspecs = New_DSpecs_Tag( DefineEnum( yyvsp[-5].edesc ) );
      ;
    break;}
case 175:
#line 792 "cfe/c/c.y"
{
        yyval.dspecs = New_DSpecs_Tag( DeclareTag( yyvsp[-1].token, yyvsp[0].str, false ) );
      ;
    break;}
case 176:
#line 799 "cfe/c/c.y"
{
        yyval.edesc = New_TEnumDesc( yyvsp[0].tnode );
      ;
    break;}
case 178:
#line 806 "cfe/c/c.y"
{yyval.edesc=yyvsp[-2].edesc;
    break;}
case 181:
#line 812 "cfe/c/c.y"
{
        DeclareEnumerator( yyvsp[-1].edesc, yyvsp[0].str, NULL );
      ;
    break;}
case 182:
#line 816 "cfe/c/c.y"
{
        DeclareEnumerator( yyvsp[-3].edesc, yyvsp[-2].str, yyvsp[0].ast );
      ;
    break;}
case 184:
#line 827 "cfe/c/c.y"
{ yyval.dspecs = New_DSpecs( yyvsp[0].token ) ;
    break;}
case 185:
#line 835 "cfe/c/c.y"
{
        yyval.dspecs = New_DSpecs_ExtQualAttr( ExtQualAttr_Make( yyvsp[-1].str ) );
      ;
    break;}
case 189:
#line 849 "cfe/c/c.y"
{ yyval.dspecs = New_DSpecs( yyvsp[0].token ) ;
    break;}
case 190:
#line 856 "cfe/c/c.y"
{
        yyval.sym = yyvsp[0].sym;
      ;
    break;}
case 191:
#line 863 "cfe/c/c.y"
{
        yyval.typ = yyvsp[0].typ;
      ;
    break;}
case 192:
#line 866 "cfe/c/c.y"
{yyval.typ=yyvsp[-4].typ;
    break;}
case 193:
#line 867 "cfe/c/c.y"
{
        yyval.typ = Type_MakeArray( 
                yyvsp[0].typ,
                yyvsp[-4].m_typ,
                yyvsp[-3].ast,
                false
             );
      ;
    break;}
case 194:
#line 875 "cfe/c/c.y"
{yyval.typ=yyvsp[-5].typ;
    break;}
case 195:
#line 876 "cfe/c/c.y"
{
        yyval.typ = Type_MakeArray( 
                yyvsp[0].typ,
                yyvsp[-4].m_typ,
                yyvsp[-3].ast,
                true
             );
      ;
    break;}
case 196:
#line 884 "cfe/c/c.y"
{yyval.typ=yyvsp[-5].typ;
    break;}
case 197:
#line 885 "cfe/c/c.y"
{
        yyval.typ = Type_MakeArray( 
                yyvsp[0].typ,
                yyvsp[-5].m_typ,
                yyvsp[-3].ast,
                true
             );
      ;
    break;}
case 198:
#line 893 "cfe/c/c.y"
{yyval.typ=yyvsp[-4].typ;
    break;}
case 199:
#line 894 "cfe/c/c.y"
{
        yyval.typ = Type_MakeArray( 
                yyvsp[0].typ,
                yyvsp[-4].m_typ,
                Ast( ast_unspecifiedVariableArraySize, &yylsp[-3] ),
                false
             );
      ;
    break;}
case 200:
#line 902 "cfe/c/c.y"
{yyval.typ=yyvsp[-1].typ;
    break;}
case 201:
#line 903 "cfe/c/c.y"
{
        yyval.typ = Type_MakeFunction( yyvsp[0].typ, yyvsp[-2].scope );
      ;
    break;}
case 202:
#line 906 "cfe/c/c.y"
{yyval.typ=yyvsp[-2].typ;
    break;}
case 203:
#line 907 "cfe/c/c.y"
{
        yyval.typ = Type_MakeFunction( yyvsp[0].typ, NULL );
      ;
    break;}
case 204:
#line 910 "cfe/c/c.y"
{yyval.typ=yyvsp[-1].typ;
    break;}
case 205:
#line 911 "cfe/c/c.y"
{
        yyval.typ = Type_MakeFunction( yyvsp[0].typ, yyvsp[-2].scope );
      ;
    break;}
case 206:
#line 918 "cfe/c/c.y"
{
        SymTab_PushNewScope( SCOPE_PARAMS );
      ;
    break;}
case 207:
#line 922 "cfe/c/c.y"
{
        yyval.scope = SymTab_PopScope(); // parameter_type_list takes care of error recovery
      ;
    break;}
case 208:
#line 929 "cfe/c/c.y"
{
        SymTab_PushNewScope( SCOPE_IDENT_LIST );
      ;
    break;}
case 209:
#line 933 "cfe/c/c.y"
{
        TODO1( "error recovery!" );
        yyval.scope = SymTab_PopScope();
      ;
    break;}
case 210:
#line 962 "cfe/c/c.y"
{ yyval.typ = NULL ;
    break;}
case 211:
#line 966 "cfe/c/c.y"
{yyval.typ=yyvsp[-1].typ;
    break;}
case 212:
#line 967 "cfe/c/c.y"
{ 
        yyval.sym = New_TSymbol( yyvsp[-2].str, yyvsp[0].typ );
      ;
    break;}
case 213:
#line 970 "cfe/c/c.y"
{yyval.typ=yyvsp[-3].typ;
    break;}
case 214:
#line 971 "cfe/c/c.y"
{
        yyval.sym = Symbol_ChainType( yyvsp[-3].sym, yyvsp[0].typ );
      ;
    break;}
case 215:
#line 984 "cfe/c/c.y"
{
        yyval.sym = yyvsp[0].sym;
      ;
    break;}
case 216:
#line 990 "cfe/c/c.y"
{yyval.typ=yyvsp[-1].typ;
    break;}
case 217:
#line 991 "cfe/c/c.y"
{ 
        yyval.sym = New_TSymbol( yyvsp[-2].str, yyvsp[0].typ );
      ;
    break;}
case 218:
#line 994 "cfe/c/c.y"
{yyval.typ=yyvsp[-3].typ;
    break;}
case 219:
#line 995 "cfe/c/c.y"
{
        yyval.sym = Symbol_ChainType( yyvsp[-3].sym, yyvsp[0].typ );
      ;
    break;}
case 220:
#line 1002 "cfe/c/c.y"
{
        yyval.sym = yyvsp[0].sym;
      ;
    break;}
case 221:
#line 1008 "cfe/c/c.y"
{yyval.typ=yyvsp[-1].typ;
    break;}
case 222:
#line 1009 "cfe/c/c.y"
{ 
        yyval.sym = New_TSymbol( yyvsp[-2].str, yyvsp[0].typ );
      ;
    break;}
case 223:
#line 1012 "cfe/c/c.y"
{yyval.typ=yyvsp[-3].typ;
    break;}
case 224:
#line 1013 "cfe/c/c.y"
{
        yyval.sym = Symbol_ChainType( yyvsp[-3].sym, yyvsp[0].typ );
      ;
    break;}
case 225:
#line 1026 "cfe/c/c.y"
{ 
        yyval.typ = Type_MakePointer( yyvsp[-2].typ, yyvsp[0].m_typ );
      ;
    break;}
case 227:
#line 1033 "cfe/c/c.y"
{ yyval.typ = yyvsp[0].typ ;
    break;}
case 228:
#line 1037 "cfe/c/c.y"
{ yyval.typ = yyvsp[0].typ ;
    break;}
case 231:
#line 1043 "cfe/c/c.y"
{ yyval.dspecs = DSPECS_COMBINE( yyvsp[-1].dspecs, yyvsp[0].dspecs ) ;
    break;}
case 232:
#line 1047 "cfe/c/c.y"
{ yyval.m_typ = DSPECS_GENQUAL( yyvsp[0].dspecs ) ;
    break;}
case 233:
#line 1052 "cfe/c/c.y"
{ yyval.m_typ = NULL ;
    break;}
case 240:
#line 1095 "cfe/c/c.y"
{
        Declare( yyvsp[-2].dspecs, yyvsp[0].sym, NULL, false );
      ;
    break;}
case 241:
#line 1101 "cfe/c/c.y"
{
        Declare( yyvsp[-2].dspecs, yyvsp[0].sym, NULL, false );
      ;
    break;}
case 242:
#line 1106 "cfe/c/c.y"
{
        Declare( yyvsp[-1].dspecs, New_TSymbol( NULL, yyvsp[0].typ ), NULL, false );
      ;
    break;}
case 243:
#line 1110 "cfe/c/c.y"
{
        DeclareEllipsis();
      ;
    break;}
case 244:
#line 1124 "cfe/c/c.y"
{ DeclareParamIdent( yyvsp[0].str ); ;
    break;}
case 245:
#line 1125 "cfe/c/c.y"
{ DeclareParamIdent( yyvsp[0].str ); ;
    break;}
case 246:
#line 1133 "cfe/c/c.y"
{TODO;
    break;}
case 247:
#line 1135 "cfe/c/c.y"
{TODO;
    break;}
case 248:
#line 1140 "cfe/c/c.y"
{
        yyval.sym = New_TSymbol( NULL, yyvsp[0].typ );
      ;
    break;}
case 249:
#line 1144 "cfe/c/c.y"
{
        yyval.sym = yyvsp[0].sym;
      ;
    break;}
case 250:
#line 1150 "cfe/c/c.y"
{yyval.typ=yyvsp[-3].typ;
    break;}
case 251:
#line 1151 "cfe/c/c.y"
{
        yyval.typ = Type_MakeArray( 
                yyvsp[0].typ,
                NULL,
                yyvsp[-3].ast,
                false
             );
      ;
    break;}
case 252:
#line 1159 "cfe/c/c.y"
{yyval.typ=yyvsp[-3].typ;
    break;}
case 253:
#line 1160 "cfe/c/c.y"
{
        yyval.typ = Type_MakeArray( 
                yyvsp[0].typ,
                NULL,
                Ast( ast_unspecifiedVariableArraySize, &yylsp[-3] ),
                false
             );
      ;
    break;}
case 254:
#line 1168 "cfe/c/c.y"
{yyval.typ=yyvsp[-2].typ;
    break;}
case 255:
#line 1169 "cfe/c/c.y"
{
        yyval.typ = Type_MakeFunction( yyvsp[0].typ, NULL );
      ;
    break;}
case 256:
#line 1172 "cfe/c/c.y"
{yyval.typ=yyvsp[-1].typ;
    break;}
case 257:
#line 1173 "cfe/c/c.y"
{
        yyval.typ = Type_MakeFunction( yyvsp[0].typ, yyvsp[-2].scope );
      ;
    break;}
case 258:
#line 1180 "cfe/c/c.y"
{
        yyval.typ = yyvsp[0].typ;
      ;
    break;}
case 260:
#line 1188 "cfe/c/c.y"
{yyval.typ=yyvsp[-3].typ;
    break;}
case 261:
#line 1189 "cfe/c/c.y"
{
        yyval.sym = Symbol_ChainType( yyvsp[-3].sym, yyvsp[0].typ );
      ;
    break;}
case 262:
#line 1193 "cfe/c/c.y"
{
        yyval.sym = New_TSymbol( NULL, yyvsp[0].typ );
      ;
    break;}
case 263:
#line 1201 "cfe/c/c.y"
{
        yyval.dspecs = New_DSpecs_Typename( yyvsp[0].sym->type );
      ;
    break;}
case 264:
#line 1208 "cfe/c/c.y"
{TODO;;
    break;}
case 282:
#line 1258 "cfe/c/c.y"
{TODO;
    break;}
case 286:
#line 1269 "cfe/c/c.y"
{
        SymTab_PushNewScope( SCOPE_BLOCK );
      ;
    break;}
case 287:
#line 1273 "cfe/c/c.y"
{
        SymTab_PopScope();
      ;
    break;}
case 288:
#line 1285 "cfe/c/c.y"
{
        SymTab_PopScope();
      ;
    break;}
case 301:
#line 1324 "cfe/c/c.y"
{Stmt_Expression( yyvsp[-1].ast );
    break;}
case 319:
#line 1375 "cfe/c/c.y"
{ CompilerStrictError( "Empty statement at file scope" ); ;
    break;}
case 320:
#line 1383 "cfe/c/c.y"
{
        DeclareFunctionDefinition( 
          yyvsp[-2].dspecs, 
          yyvsp[-1].typ,
          yyvsp[0].sym,
          NULL
        );
      ;
    break;}
case 322:
#line 1396 "cfe/c/c.y"
{
        DeclareFunctionDefinition( 
          yyvsp[-3].dspecs, 
          yyvsp[-2].typ,
          yyvsp[-1].sym,
          yyvsp[0].scope
        );
      ;
    break;}
case 324:
#line 1408 "cfe/c/c.y"
{
        SymTab_PushNewScope( SCOPE_PARAMS );
      ;
    break;}
case 325:
#line 1412 "cfe/c/c.y"
{
        // error recovery is handled in declaration_list
        yyval.scope = SymTab_PopScope();  
      ;
    break;}
}

#line 740 "cfe/c/bison.simple.c"


  yyvsp -= yylen;
  yyssp -= yylen;
#if YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "state stack now");
      while (yyssp1 != yyssp)
        YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;
#if YYLSP_NEEDED
  *++yylsp = yyloc;
#endif

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
#define YYTDESC(x)  (yytokdesc[x] ? yytokdesc[x] : yytname[x])
//#define YYTDESC(x)  yytname[x]
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
        {
          YYSIZE_T yysize = 0;
          char *yymsg;
          int yyx, yycount;

          yycount = 0;
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  */
          for (yyx = yyn < 0 ? -yyn : 0;
               yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
            if (yycheck[yyx + yyn] == yyx)
              yysize += yystrlen (YYTDESC(yyx)) + 15, yycount++;
          yysize += yystrlen ("parse error, unexpected ") + 1;
          yysize += yystrlen (YYTDESC(YYTRANSLATE (yychar)));
          yymsg = (char *) YYSTACK_ALLOC (yysize);
          if (yymsg != 0)
            {
              char *yyp = yystpcpy (yymsg, "parse error, unexpected ");
              yyp = yystpcpy (yyp, YYTDESC(YYTRANSLATE (yychar)));

              if (yycount < 5)
                {
                  yycount = 0;
                  for (yyx = yyn < 0 ? -yyn : 0;
                       yyx < (int) (sizeof (yytname) / sizeof (char *));
                       yyx++)
                    if (yycheck[yyx + yyn] == yyx)
                      {
                        const char *yyq = ! yycount ? ", expecting " : " or ";
                        yyp = yystpcpy (yyp, yyq);
                        yyp = yystpcpy (yyp, YYTDESC(yyx));
                        yycount++;
                      }
                }
              yyerror (yymsg);
              YYSTACK_FREE (yymsg);
            }
          else
            yyerror ("parse error; also virtual memory exhausted");
        }
      else
#endif /* defined (YYERROR_VERBOSE) */
        yyerror ("parse error");
    }
  goto yyerrlab1;


/*--------------------------------------------------.
| yyerrlab1 -- error raised explicitly by an action |
`--------------------------------------------------*/
yyerrlab1:
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
        YYABORT;
      YYDPRINTF ((stderr, "Discarding token %d (%s).\n",
                  yychar, yytname[yychar1]));
      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */

  yyerrstatus = 3;              /* Each real token shifted decrements this */

  goto yyerrhandle;


/*-------------------------------------------------------------------.
| yyerrdefault -- current state does not do anything special for the |
| error token.                                                       |
`-------------------------------------------------------------------*/
yyerrdefault:
#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */

  /* If its default is to accept any token, ok.  Otherwise pop it.  */
  yyn = yydefact[yystate];
  if (yyn)
    goto yydefault;
#endif


/*---------------------------------------------------------------.
| yyerrpop -- pop the current state because it cannot handle the |
| error token                                                    |
`---------------------------------------------------------------*/
yyerrpop:
  if (yyssp == yyss)
    YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#if YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "Error: state stack now");
      while (yyssp1 != yyssp)
        YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

/*--------------.
| yyerrhandle.  |
`--------------*/
yyerrhandle:
  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
        goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

  YYDPRINTF ((stderr, "Shifting error token, "));

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

/*---------------------------------------------.
| yyoverflowab -- parser overflow comes here.  |
`---------------------------------------------*/
yyoverflowlab:
  yyerror ("parser stack overflow");
  yyresult = 2;
  /* Fall through.  */

yyreturn:
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  return yyresult;
}
#line 1423 "cfe/c/c.y"


// DSpecs manipulation routines, with explicitly freeing the no-longer used 
// argument to conserve memory. 
// Note: we need to zero the parser stack location that holds the 
// freed value.

//--------------------------------------------------------------------------
// Name         DSpecs_Combine_Prim
//
// 
//--------------------------------------------------------------------------
static TDeclSpecs * DSpecs_Combine_Prim ( TDeclSpecs ** pa, TDeclSpecs ** pb )
{
  TDeclSpecs * res = DSpecs_Add( *pa, *pb );

  if (res != *pa)
    GC_DELETE( *pa );
  if (res != *pb)
    GC_DELETE( *pb );

  return res;
};

//--------------------------------------------------------------------------
// Name         DSpecs_GenQual_Prim 
//
// 
//--------------------------------------------------------------------------
static TQualNode * DSpecs_GenQual_Prim ( TDeclSpecs ** pds )
{
  TQualNode * res = DSpecs_GenQual( *pds );
  GC_DELETE( *pds );
  return res;
}

//--------------------------------------------------------------------------
// Name         yy_mark 
//
// Mark the contents of a semantic stack entry (YYSTYPE).
//
// _typ_ identifies the type of the entry, corresponing to a member
// of the declared %union. The possible values of _typ_ (YYST_xxx) are 
// generated automatically by PREBIS and are defined in c.tab.inc
//--------------------------------------------------------------------------
static void yy_mark ( unsigned typ, const YYSTYPE * pval )
{
  MAKE_SURE( YYST__LAST == 11 );

  switch (typ)
  {
  case YYST_AST:
    GC_MARK( pval->ast ); break;

  case YYST_STR:
    GC_MARK( pval->str ); break;

  case YYST_TOKEN:
    break;

  case YYST_SYM:
    GC_MARK( pval->sym ); break;

  case YYST_SCOPE:
    GC_MARK( pval->scope ); break;

  case YYST_TYP:
    GC_MARK( pval->typ ); break;

  case YYST_DSPECS:
    GC_MARK( pval->dspecs ); break;

  case YYST_TNODE:
    GC_MARK( pval->tnode ); break;

  case YYST_EDESC:
    GC_MARK( pval->edesc ); break;

  case YYST_M_TYP:
    GC_MARK( pval->m_typ ); break;

  default:
    ASSERT( 0 );
  }
}


#ifndef TEST_YYPARSE

void yyerror ( char * err )
{
  CompilerError( "at '%s' : %s", yytext, err );
};

#else

void yyerror ( char * err )
{
  printf( "\n\n **** error: %s\n\n", err );
};

int yylex ( void )
{
  int res;
  char buf[32];
  for(;;)
  {
    printf( "Enter code:" );
    gets( buf );

    if (isdigit(buf[0]))
    {
      if (sscanf( buf, "%d", &res ) != 1)
        printf( "Error! Try again.\n" );
      else
        return res;
    }
    else
    if (isalpha( buf[0] ))
    {
      int i;
      for ( i = 0; yytname[i] != NULL; ++i )
      {
        if (_stricmp( buf, yytname[i] ) == 0)
          return i + 255;
      }
      printf( "Undefined token! Try again.\n" );
    }
    else
      return buf[0];
  }
};

int main ( int argc, char ** argv )
{
#if YYDEBUG
  yydebug = argc == 2;
#endif 
  yyparse();

  return 0;
};
#endif // TEST_YYPARSE

